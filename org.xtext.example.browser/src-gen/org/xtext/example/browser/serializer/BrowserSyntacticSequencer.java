/*
 * generated by Xtext
 */
package org.xtext.example.browser.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.browser.services.BrowserGrammarAccess;

@SuppressWarnings("all")
public class BrowserSyntacticSequencer extends AbstractSyntacticSequencer {

	protected BrowserGrammarAccess grammarAccess;
	protected AbstractElementAlias match_BooleanCondition_FalseKeyword_3_or_TrueKeyword_2;
	protected AbstractElementAlias match_Condition___RightCurlyBracketKeyword_8_3_ElseKeyword_8_0_LeftCurlyBracketKeyword_8_1__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (BrowserGrammarAccess) access;
		match_BooleanCondition_FalseKeyword_3_or_TrueKeyword_2 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getBooleanConditionAccess().getFalseKeyword_3()), new TokenAlias(false, false, grammarAccess.getBooleanConditionAccess().getTrueKeyword_2()));
		match_Condition___RightCurlyBracketKeyword_8_3_ElseKeyword_8_0_LeftCurlyBracketKeyword_8_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getConditionAccess().getRightCurlyBracketKeyword_8_3()), new TokenAlias(false, false, grammarAccess.getConditionAccess().getElseKeyword_8_0()), new TokenAlias(false, false, grammarAccess.getConditionAccess().getLeftCurlyBracketKeyword_8_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_BooleanCondition_FalseKeyword_3_or_TrueKeyword_2.equals(syntax))
				emit_BooleanCondition_FalseKeyword_3_or_TrueKeyword_2(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Condition___RightCurlyBracketKeyword_8_3_ElseKeyword_8_0_LeftCurlyBracketKeyword_8_1__q.equals(syntax))
				emit_Condition___RightCurlyBracketKeyword_8_3_ElseKeyword_8_0_LeftCurlyBracketKeyword_8_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'true' | 'false'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_BooleanCondition_FalseKeyword_3_or_TrueKeyword_2(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('}' 'else' '{')?
	 *
	 * This ambiguous syntax occurs at:
	 *     func+=Function (ambiguity) func+=Function
	 */
	protected void emit_Condition___RightCurlyBracketKeyword_8_3_ElseKeyword_8_0_LeftCurlyBracketKeyword_8_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
