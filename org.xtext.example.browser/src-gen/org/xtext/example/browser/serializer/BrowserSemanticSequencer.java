/*
 * generated by Xtext
 */
package org.xtext.example.browser.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.browser.browser.BooleanCondition;
import org.xtext.example.browser.browser.BrowserPackage;
import org.xtext.example.browser.browser.Button;
import org.xtext.example.browser.browser.CheckBox;
import org.xtext.example.browser.browser.CheckIf;
import org.xtext.example.browser.browser.Clear;
import org.xtext.example.browser.browser.ClickOn;
import org.xtext.example.browser.browser.Collections;
import org.xtext.example.browser.browser.Condition;
import org.xtext.example.browser.browser.Fill;
import org.xtext.example.browser.browser.FillAllTextFields;
import org.xtext.example.browser.browser.Function;
import org.xtext.example.browser.browser.GoTo;
import org.xtext.example.browser.browser.Instructions;
import org.xtext.example.browser.browser.Link;
import org.xtext.example.browser.browser.Loop;
import org.xtext.example.browser.browser.Memorise;
import org.xtext.example.browser.browser.Onglet;
import org.xtext.example.browser.browser.Parameters;
import org.xtext.example.browser.browser.Password;
import org.xtext.example.browser.browser.Procedure;
import org.xtext.example.browser.browser.ProcedureLaunch;
import org.xtext.example.browser.browser.Select;
import org.xtext.example.browser.browser.Text;
import org.xtext.example.browser.browser.TextField;
import org.xtext.example.browser.browser.Variable;
import org.xtext.example.browser.browser.WebBrowser;
import org.xtext.example.browser.browser.WebPageObj;
import org.xtext.example.browser.services.BrowserGrammarAccess;

@SuppressWarnings("all")
public class BrowserSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BrowserGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == BrowserPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case BrowserPackage.BOOLEAN_CONDITION:
				sequence_BooleanCondition(context, (BooleanCondition) semanticObject); 
				return; 
			case BrowserPackage.BUTTON:
				sequence_Button(context, (Button) semanticObject); 
				return; 
			case BrowserPackage.CHECK_BOX:
				sequence_CheckBox(context, (CheckBox) semanticObject); 
				return; 
			case BrowserPackage.CHECK_IF:
				sequence_CheckIf(context, (CheckIf) semanticObject); 
				return; 
			case BrowserPackage.CLEAR:
				sequence_Clear(context, (Clear) semanticObject); 
				return; 
			case BrowserPackage.CLICK_ON:
				sequence_ClickOn(context, (ClickOn) semanticObject); 
				return; 
			case BrowserPackage.COLLECTIONS:
				sequence_Collections(context, (Collections) semanticObject); 
				return; 
			case BrowserPackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case BrowserPackage.FILL:
				sequence_Fill(context, (Fill) semanticObject); 
				return; 
			case BrowserPackage.FILL_ALL_TEXT_FIELDS:
				sequence_FillAllTextFields(context, (FillAllTextFields) semanticObject); 
				return; 
			case BrowserPackage.FUNCTION:
				sequence_Function(context, (Function) semanticObject); 
				return; 
			case BrowserPackage.GO_TO:
				sequence_GoTo(context, (GoTo) semanticObject); 
				return; 
			case BrowserPackage.INSTRUCTIONS:
				sequence_Instructions(context, (Instructions) semanticObject); 
				return; 
			case BrowserPackage.LINK:
				sequence_Link(context, (Link) semanticObject); 
				return; 
			case BrowserPackage.LOOP:
				sequence_Loop(context, (Loop) semanticObject); 
				return; 
			case BrowserPackage.MEMORISE:
				sequence_Memorise(context, (Memorise) semanticObject); 
				return; 
			case BrowserPackage.ONGLET:
				sequence_Onglet(context, (Onglet) semanticObject); 
				return; 
			case BrowserPackage.PARAMETERS:
				sequence_Parameters(context, (Parameters) semanticObject); 
				return; 
			case BrowserPackage.PASSWORD:
				sequence_Password(context, (Password) semanticObject); 
				return; 
			case BrowserPackage.PROCEDURE:
				sequence_Procedure(context, (Procedure) semanticObject); 
				return; 
			case BrowserPackage.PROCEDURE_LAUNCH:
				sequence_ProcedureLaunch(context, (ProcedureLaunch) semanticObject); 
				return; 
			case BrowserPackage.SELECT:
				sequence_Select(context, (Select) semanticObject); 
				return; 
			case BrowserPackage.TEXT:
				sequence_Text(context, (Text) semanticObject); 
				return; 
			case BrowserPackage.TEXT_FIELD:
				sequence_TextField(context, (TextField) semanticObject); 
				return; 
			case BrowserPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			case BrowserPackage.WEB_BROWSER:
				sequence_WebBrowser(context, (WebBrowser) semanticObject); 
				return; 
			case BrowserPackage.WEB_PAGE_OBJ:
				sequence_WebPageObj(context, (WebPageObj) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (
	 *         ((arg1=WebPageObj | arg1=[Variable|ID]) (arg2=WebPageObj | arg2=[Variable|ID])) | 
	 *         ((arg1=WebPageObj | arg1=[Variable|ID]) (arg2=WebPageObj | arg2=[Variable|ID])) | 
	 *         arg1=WebPageObj | 
	 *         arg1=[Variable|ID] | 
	 *         arg1=WebPageObj | 
	 *         arg1=[Variable|ID] | 
	 *         arg=WebPageObj | 
	 *         arg=[Variable|ID] | 
	 *         bool=BooleanCondition | 
	 *         bool=[Variable|ID]
	 *     )?
	 */
	protected void sequence_BooleanCondition(EObject context, BooleanCondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     button=STRING
	 */
	protected void sequence_Button(EObject context, Button semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.BUTTON__BUTTON) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.BUTTON__BUTTON));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getButtonAccess().getButtonSTRINGTerminalRuleCall_1_0(), semanticObject.getButton());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     checkBox=STRING
	 */
	protected void sequence_CheckBox(EObject context, CheckBox semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.CHECK_BOX__CHECK_BOX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.CHECK_BOX__CHECK_BOX));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getCheckBoxAccess().getCheckBoxSTRINGTerminalRuleCall_1_0(), semanticObject.getCheckBox());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     ((args=STRING | v1=[Variable|ID]) (linKToCheck=STRING | v2=[Variable|ID]))
	 */
	protected void sequence_CheckIf(EObject context, CheckIf semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (t=TextField | p=Password | v=[Variable|ID])
	 */
	protected void sequence_Clear(EObject context, Clear semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (button=Button | link=Link | v=[Variable|ID])
	 */
	protected void sequence_ClickOn(EObject context, ClickOn semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (s=SelectAllCheckboxes | c=ClickOnAllButtons | f=FillAllTextFields | g=GoToAllLinks)
	 */
	protected void sequence_Collections(EObject context, Collections semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (ifCond=BooleanCondition | ifCond=[Variable|ID]) 
	 *         func+=Function+ 
	 *         ((elseifConds+=BooleanCondition | elseifConds+=[Variable|ID]) func+=Function+)* 
	 *         func+=Function*
	 *     )
	 */
	protected void sequence_Condition(EObject context, Condition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (input=STRING | v=[Variable|ID])
	 */
	protected void sequence_FillAllTextFields(EObject context, FillAllTextFields semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((tf=TextField | pass=Password | v=[Variable|ID]) input=STRING)
	 */
	protected void sequence_Fill(EObject context, Fill semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         gtl=GoTo | 
	 *         cob=ClickOn | 
	 *         ftf=Fill | 
	 *         sel=Select | 
	 *         ci=CheckIf | 
	 *         cl=Clear
	 *     )
	 */
	protected void sequence_Function(EObject context, Function semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (link=Link | v=[Variable|ID])
	 */
	protected void sequence_GoTo(EObject context, GoTo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         func=Function | 
	 *         ifCond=Condition | 
	 *         loop=Loop | 
	 *         coll=Collections | 
	 *         mem=Memorise | 
	 *         procs=Procedure | 
	 *         l=ProcedureLaunch | 
	 *         v=Variable
	 *     )
	 */
	protected void sequence_Instructions(EObject context, Instructions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     link=STRING
	 */
	protected void sequence_Link(EObject context, Link semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.LINK__LINK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.LINK__LINK));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getLinkAccess().getLinkSTRINGTerminalRuleCall_1_0(), semanticObject.getLink());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (func+=Function+ (bool=BooleanCondition | bool=[Variable|ID]))
	 */
	protected void sequence_Loop(EObject context, Loop semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (obj=WebPageObj var=[Variable|ID])
	 */
	protected void sequence_Memorise(EObject context, Memorise semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.MEMORISE__OBJ) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.MEMORISE__OBJ));
			if(transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.MEMORISE__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.MEMORISE__VAR));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getMemoriseAccess().getObjWebPageObjParserRuleCall_1_0(), semanticObject.getObj());
		feeder.accept(grammarAccess.getMemoriseAccess().getVarVariableIDTerminalRuleCall_3_0_1(), semanticObject.getVar());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (url=STRING ins+=Instructions*)
	 */
	protected void sequence_Onglet(EObject context, Onglet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     pars+=STRING*
	 */
	protected void sequence_Parameters(EObject context, Parameters semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     password=STRING
	 */
	protected void sequence_Password(EObject context, Password semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.PASSWORD__PASSWORD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.PASSWORD__PASSWORD));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getPasswordAccess().getPasswordSTRINGTerminalRuleCall_1_0(), semanticObject.getPassword());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     proc=[Procedure|ID]
	 */
	protected void sequence_ProcedureLaunch(EObject context, ProcedureLaunch semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.PROCEDURE_LAUNCH__PROC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.PROCEDURE_LAUNCH__PROC));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getProcedureLaunchAccess().getProcProcedureIDTerminalRuleCall_1_0_1(), semanticObject.getProc());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID params=Parameters ins+=Instructions+)
	 */
	protected void sequence_Procedure(EObject context, Procedure semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (sb=CheckBox | v=[Variable|ID])
	 */
	protected void sequence_Select(EObject context, Select semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     username=STRING
	 */
	protected void sequence_TextField(EObject context, TextField semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.TEXT_FIELD__USERNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.TEXT_FIELD__USERNAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getTextFieldAccess().getUsernameSTRINGTerminalRuleCall_1_0(), semanticObject.getUsername());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     text=STRING
	 */
	protected void sequence_Text(EObject context, Text semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.TEXT__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.TEXT__TEXT));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getTextAccess().getTextSTRINGTerminalRuleCall_1_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (o=WebPageObj name=ID)
	 */
	protected void sequence_Variable(EObject context, Variable semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.VARIABLE__O) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.VARIABLE__O));
			if(transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.VARIABLE__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getVariableAccess().getOWebPageObjParserRuleCall_1_0(), semanticObject.getO());
		feeder.accept(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID onglets+=Onglet*)
	 */
	protected void sequence_WebBrowser(EObject context, WebBrowser semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         tf=TextField | 
	 *         psw=Password | 
	 *         btn=Button | 
	 *         ck=CheckBox | 
	 *         t=Text | 
	 *         l=Link
	 *     )
	 */
	protected void sequence_WebPageObj(EObject context, WebPageObj semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
