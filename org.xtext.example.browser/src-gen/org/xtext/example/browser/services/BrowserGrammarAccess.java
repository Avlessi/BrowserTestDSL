/*
 * generated by Xtext
 */
package org.xtext.example.browser.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class BrowserGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class WebBrowserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WebBrowser");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWebBrowserKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cOpenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOngletsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOngletsOngletParserRuleCall_3_0 = (RuleCall)cOngletsAssignment_3.eContents().get(0);
		private final Keyword cCloseKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *Model:
		//	'webBrowser' name=ID
		//	'open'
		//		onglets+=Onglet*
		//	'close';
		//	
		//Onglet:
		//	 'open' 'Onglet' ':' url=STRING	 	
		//	  ins=Instruction*  
		//	 'close';
		//
		//Instruction:
		//	function=Function |  
		//	ifcond+=Condition |
		//	loop+=Loop |
		//	coll = Collections |
		//	mem = Memorise |
		//	proc = Procedure |
		//	launchProc = ProcedureLaunch |
		//	variable = Variable
		//;
		//
		//Function:
		//	GoToLink |
		//	ClickOn |
		//	Fill |
		//	SelectCheckBox |	 
		//	CheckIf |
		//	Clear 
		//;
		//
		//GoToLink:
		//	'goTo' (link=Link | v=[Variable] )  
		//;
		//
		//ClickOn:
		//	'clickOn' ( b=Button | l=Link | v=[Variable] ) 
		//;
		//
		//Fill:
		//	'fill' (t=TextField | p=Password | v1=[Variable] ) 'with' (input=STRING | v2=[Variable])  	
		//;
		//
		//SelectCheckBox:
		//	'select' ( cb=CheckBox | v=[Variable] ) 
		//;
		//
		//CheckIf:
		//	'checkIf' ( args=STRING | v1=[Variable] ) 'isIn' (linkToCheck=STRING | v2=[Variable] ) 
		//;
		//
		//Clear:
		//	'clear' (t=TextField | p=Password | v=[Variable])
		//;
		//
		//Loop:
		//	'do' '{' funcs+=Function+ '}' 'while' '(' cond=BooleanCondition ')'
		//;
		//
		//Condition:
		//	'if'  '(' ifCond = BooleanCondition ')' 
		//		'{' (funcs+=Function+) '}' 
		//	( 'else if' '(' elseifConds += BooleanCondition ')' 
		//		(funcs+=Function+) 	)*
		//	( 'else' '{' ( funcs+=Function+)  '}'  )*  
		//;
		//
		//BooleanCondition:
		//	(arg1=WebPageObj | v1=[Variable]) 'equals' (arg2=WebPageObj | v2=[Variable] ) |
		//	(arg1=WebPageObj | v1=[Variable]) 'notEquals' (arg2=WebPageObj | v2=[Variable] )|
		//	'true' | 
		//	'false' | 
		//	(arg=WebPageObj | v=[Variable]) 'isEmpty' |
		//	(arg=WebPageObj | v=[Variable]) 'isNotEmpty' |
		//	(arg=WebPageObj | v=[Variable] ) 'exist' |
		//	'not' '(' (arg=WebPageObj | v=[Variable]) ')'
		//;
		//
		//WebPageObj:
		//	TextField |
		//	Password |
		//	Button |
		//	CheckBox |
		//	Text |
		//	Link	 		
		//;
		//
		//TextField:
		//	'textField' username=STRING
		//;
		//
		//Password:
		//	'password' password=STRING 
		//;
		//
		//Button:
		//	'button' button=STRING 
		//;
		//
		//CheckBox:
		//	'checkBox' checkBox=STRING 
		//;
		//
		//Text:
		//	'text' text=STRING
		//;
		//
		//Link:
		//	'link' link=STRING
		//;
		//
		//Collections:
		//	SelectAllCheckboxes | 
		//	ClickOnAllButtons |
		//	FillAllTextFields |
		//	GoToAllLinks
		//;
		//
		//SelectAllCheckboxes:
		//	'selectAllCheckBoxes'
		//;
		//
		//ClickOnAllButtons :
		//	'clickOnAllButtons'
		//;
		//
		//FillAllTextFields:
		//	'fillAllTextFields' 'with' (input=STRING | v=[Variable])
		//;
		//
		//GoToAllLinks:
		//	'goToAllLinks'
		//;
		//
		//Memorise:
		//	'memorise' obj=WebPageObj 'in' variable=[Variable]
		//;
		//
		//Variable:
		//	'var' (o=WebPageObj) (name=ID)
		//;
		//
		//Procedure:
		//	'procedure' name=ID 'with' 'Params'	
		//	parameters=Parameters
		//	inst+=Instruction+
		//	'endProcedure'
		//;
		//
		//Parameters:
		//	pars+=STRING*
		//;
		//
		//ProcedureLaunch:
		//	'launchProcedure' proc=[Procedure]
		//;* / WebBrowser:
		//	"webBrowser" name=ID "open" onglets+=Onglet* "close";
		@Override public ParserRule getRule() { return rule; }

		//"webBrowser" name=ID "open" onglets+=Onglet* "close"
		public Group getGroup() { return cGroup; }

		//"webBrowser"
		public Keyword getWebBrowserKeyword_0() { return cWebBrowserKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"open"
		public Keyword getOpenKeyword_2() { return cOpenKeyword_2; }

		//onglets+=Onglet*
		public Assignment getOngletsAssignment_3() { return cOngletsAssignment_3; }

		//Onglet
		public RuleCall getOngletsOngletParserRuleCall_3_0() { return cOngletsOngletParserRuleCall_3_0; }

		//"close"
		public Keyword getCloseKeyword_4() { return cCloseKeyword_4; }
	}

	public class OngletElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Onglet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOpenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOngletKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUrlAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUrlSTRINGTerminalRuleCall_3_0 = (RuleCall)cUrlAssignment_3.eContents().get(0);
		private final Assignment cInsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInsInstructionsParserRuleCall_4_0 = (RuleCall)cInsAssignment_4.eContents().get(0);
		private final Keyword cCloseKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Onglet:
		//	"open" "Onglet" ":" url=STRING ins+=Instructions* "close";
		@Override public ParserRule getRule() { return rule; }

		//"open" "Onglet" ":" url=STRING ins+=Instructions* "close"
		public Group getGroup() { return cGroup; }

		//"open"
		public Keyword getOpenKeyword_0() { return cOpenKeyword_0; }

		//"Onglet"
		public Keyword getOngletKeyword_1() { return cOngletKeyword_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//url=STRING
		public Assignment getUrlAssignment_3() { return cUrlAssignment_3; }

		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_3_0() { return cUrlSTRINGTerminalRuleCall_3_0; }

		//ins+=Instructions*
		public Assignment getInsAssignment_4() { return cInsAssignment_4; }

		//Instructions
		public RuleCall getInsInstructionsParserRuleCall_4_0() { return cInsInstructionsParserRuleCall_4_0; }

		//"close"
		public Keyword getCloseKeyword_5() { return cCloseKeyword_5; }
	}

	public class InstructionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instructions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFuncAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cFuncFunctionParserRuleCall_0_0 = (RuleCall)cFuncAssignment_0.eContents().get(0);
		private final Assignment cIfCondAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIfCondConditionParserRuleCall_1_0 = (RuleCall)cIfCondAssignment_1.eContents().get(0);
		private final Assignment cLoopAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cLoopLoopParserRuleCall_2_0 = (RuleCall)cLoopAssignment_2.eContents().get(0);
		private final Assignment cCollAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cCollCollectionsParserRuleCall_3_0 = (RuleCall)cCollAssignment_3.eContents().get(0);
		private final Assignment cMemAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cMemMemoriseParserRuleCall_4_0 = (RuleCall)cMemAssignment_4.eContents().get(0);
		private final Assignment cProcsAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cProcsProcedureParserRuleCall_5_0 = (RuleCall)cProcsAssignment_5.eContents().get(0);
		private final Assignment cLAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cLProcedureLaunchParserRuleCall_6_0 = (RuleCall)cLAssignment_6.eContents().get(0);
		private final Assignment cVAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cVVariableParserRuleCall_7_0 = (RuleCall)cVAssignment_7.eContents().get(0);
		
		//Instructions:
		//	func=Function | ifCond=Condition | loop=Loop | coll=Collections | mem=Memorise | procs=Procedure | l=ProcedureLaunch
		//	| v=Variable;
		@Override public ParserRule getRule() { return rule; }

		//func=Function | ifCond=Condition | loop=Loop | coll=Collections | mem=Memorise | procs=Procedure | l=ProcedureLaunch |
		//v=Variable
		public Alternatives getAlternatives() { return cAlternatives; }

		//func=Function
		public Assignment getFuncAssignment_0() { return cFuncAssignment_0; }

		//Function
		public RuleCall getFuncFunctionParserRuleCall_0_0() { return cFuncFunctionParserRuleCall_0_0; }

		//ifCond=Condition
		public Assignment getIfCondAssignment_1() { return cIfCondAssignment_1; }

		//Condition
		public RuleCall getIfCondConditionParserRuleCall_1_0() { return cIfCondConditionParserRuleCall_1_0; }

		//loop=Loop
		public Assignment getLoopAssignment_2() { return cLoopAssignment_2; }

		//Loop
		public RuleCall getLoopLoopParserRuleCall_2_0() { return cLoopLoopParserRuleCall_2_0; }

		//coll=Collections
		public Assignment getCollAssignment_3() { return cCollAssignment_3; }

		//Collections
		public RuleCall getCollCollectionsParserRuleCall_3_0() { return cCollCollectionsParserRuleCall_3_0; }

		//mem=Memorise
		public Assignment getMemAssignment_4() { return cMemAssignment_4; }

		//Memorise
		public RuleCall getMemMemoriseParserRuleCall_4_0() { return cMemMemoriseParserRuleCall_4_0; }

		//procs=Procedure
		public Assignment getProcsAssignment_5() { return cProcsAssignment_5; }

		//Procedure
		public RuleCall getProcsProcedureParserRuleCall_5_0() { return cProcsProcedureParserRuleCall_5_0; }

		//l=ProcedureLaunch
		public Assignment getLAssignment_6() { return cLAssignment_6; }

		//ProcedureLaunch
		public RuleCall getLProcedureLaunchParserRuleCall_6_0() { return cLProcedureLaunchParserRuleCall_6_0; }

		//v=Variable
		public Assignment getVAssignment_7() { return cVAssignment_7; }

		//Variable
		public RuleCall getVVariableParserRuleCall_7_0() { return cVVariableParserRuleCall_7_0; }
	}

	public class ProcedureLaunchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcedureLaunch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLaunchProcedureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProcAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cProcProcedureCrossReference_1_0 = (CrossReference)cProcAssignment_1.eContents().get(0);
		private final RuleCall cProcProcedureIDTerminalRuleCall_1_0_1 = (RuleCall)cProcProcedureCrossReference_1_0.eContents().get(1);
		
		//ProcedureLaunch:
		//	"launchProcedure" proc=[Procedure];
		@Override public ParserRule getRule() { return rule; }

		//"launchProcedure" proc=[Procedure]
		public Group getGroup() { return cGroup; }

		//"launchProcedure"
		public Keyword getLaunchProcedureKeyword_0() { return cLaunchProcedureKeyword_0; }

		//proc=[Procedure]
		public Assignment getProcAssignment_1() { return cProcAssignment_1; }

		//[Procedure]
		public CrossReference getProcProcedureCrossReference_1_0() { return cProcProcedureCrossReference_1_0; }

		//ID
		public RuleCall getProcProcedureIDTerminalRuleCall_1_0_1() { return cProcProcedureIDTerminalRuleCall_1_0_1; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cGtlAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cGtlGoToParserRuleCall_0_0 = (RuleCall)cGtlAssignment_0.eContents().get(0);
		private final Assignment cCobAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCobClickOnParserRuleCall_1_0 = (RuleCall)cCobAssignment_1.eContents().get(0);
		private final Assignment cFtfAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cFtfFillParserRuleCall_2_0 = (RuleCall)cFtfAssignment_2.eContents().get(0);
		private final Assignment cSelAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cSelSelectParserRuleCall_3_0 = (RuleCall)cSelAssignment_3.eContents().get(0);
		private final Assignment cCiAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cCiCheckIfParserRuleCall_4_0 = (RuleCall)cCiAssignment_4.eContents().get(0);
		private final Assignment cClAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cClClearParserRuleCall_5_0 = (RuleCall)cClAssignment_5.eContents().get(0);
		
		//Function:
		//	gtl=GoTo | cob=ClickOn | ftf=Fill | sel=Select | ci=CheckIf | cl=Clear;
		@Override public ParserRule getRule() { return rule; }

		//gtl=GoTo | cob=ClickOn | ftf=Fill | sel=Select | ci=CheckIf | cl=Clear
		public Alternatives getAlternatives() { return cAlternatives; }

		//gtl=GoTo
		public Assignment getGtlAssignment_0() { return cGtlAssignment_0; }

		//GoTo
		public RuleCall getGtlGoToParserRuleCall_0_0() { return cGtlGoToParserRuleCall_0_0; }

		//cob=ClickOn
		public Assignment getCobAssignment_1() { return cCobAssignment_1; }

		//ClickOn
		public RuleCall getCobClickOnParserRuleCall_1_0() { return cCobClickOnParserRuleCall_1_0; }

		//ftf=Fill
		public Assignment getFtfAssignment_2() { return cFtfAssignment_2; }

		//Fill
		public RuleCall getFtfFillParserRuleCall_2_0() { return cFtfFillParserRuleCall_2_0; }

		//sel=Select
		public Assignment getSelAssignment_3() { return cSelAssignment_3; }

		//Select
		public RuleCall getSelSelectParserRuleCall_3_0() { return cSelSelectParserRuleCall_3_0; }

		//ci=CheckIf
		public Assignment getCiAssignment_4() { return cCiAssignment_4; }

		//CheckIf
		public RuleCall getCiCheckIfParserRuleCall_4_0() { return cCiCheckIfParserRuleCall_4_0; }

		//cl=Clear
		public Assignment getClAssignment_5() { return cClAssignment_5; }

		//Clear
		public RuleCall getClClearParserRuleCall_5_0() { return cClClearParserRuleCall_5_0; }
	}

	public class GoToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GoTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGoToKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cLinkAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cLinkLinkParserRuleCall_1_0_0 = (RuleCall)cLinkAssignment_1_0.eContents().get(0);
		private final Assignment cVAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cVVariableCrossReference_1_1_0 = (CrossReference)cVAssignment_1_1.eContents().get(0);
		private final RuleCall cVVariableIDTerminalRuleCall_1_1_0_1 = (RuleCall)cVVariableCrossReference_1_1_0.eContents().get(1);
		
		//GoTo:
		//	"goTo" (link=Link | v=[Variable]);
		@Override public ParserRule getRule() { return rule; }

		//"goTo" (link=Link | v=[Variable])
		public Group getGroup() { return cGroup; }

		//"goTo"
		public Keyword getGoToKeyword_0() { return cGoToKeyword_0; }

		//link=Link | v=[Variable]
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//link=Link
		public Assignment getLinkAssignment_1_0() { return cLinkAssignment_1_0; }

		//Link
		public RuleCall getLinkLinkParserRuleCall_1_0_0() { return cLinkLinkParserRuleCall_1_0_0; }

		//v=[Variable]
		public Assignment getVAssignment_1_1() { return cVAssignment_1_1; }

		//[Variable]
		public CrossReference getVVariableCrossReference_1_1_0() { return cVVariableCrossReference_1_1_0; }

		//ID
		public RuleCall getVVariableIDTerminalRuleCall_1_1_0_1() { return cVVariableIDTerminalRuleCall_1_1_0_1; }
	}

	public class ClickOnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClickOn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClickOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cButtonAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cButtonButtonParserRuleCall_1_0_0 = (RuleCall)cButtonAssignment_1_0.eContents().get(0);
		private final Assignment cLinkAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cLinkLinkParserRuleCall_1_1_0 = (RuleCall)cLinkAssignment_1_1.eContents().get(0);
		private final Assignment cVAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final CrossReference cVVariableCrossReference_1_2_0 = (CrossReference)cVAssignment_1_2.eContents().get(0);
		private final RuleCall cVVariableIDTerminalRuleCall_1_2_0_1 = (RuleCall)cVVariableCrossReference_1_2_0.eContents().get(1);
		
		//ClickOn:
		//	"clickOn" (button=Button | link=Link | v=[Variable]);
		@Override public ParserRule getRule() { return rule; }

		//"clickOn" (button=Button | link=Link | v=[Variable])
		public Group getGroup() { return cGroup; }

		//"clickOn"
		public Keyword getClickOnKeyword_0() { return cClickOnKeyword_0; }

		//button=Button | link=Link | v=[Variable]
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//button=Button
		public Assignment getButtonAssignment_1_0() { return cButtonAssignment_1_0; }

		//Button
		public RuleCall getButtonButtonParserRuleCall_1_0_0() { return cButtonButtonParserRuleCall_1_0_0; }

		//link=Link
		public Assignment getLinkAssignment_1_1() { return cLinkAssignment_1_1; }

		//Link
		public RuleCall getLinkLinkParserRuleCall_1_1_0() { return cLinkLinkParserRuleCall_1_1_0; }

		//v=[Variable]
		public Assignment getVAssignment_1_2() { return cVAssignment_1_2; }

		//[Variable]
		public CrossReference getVVariableCrossReference_1_2_0() { return cVVariableCrossReference_1_2_0; }

		//ID
		public RuleCall getVVariableIDTerminalRuleCall_1_2_0_1() { return cVVariableIDTerminalRuleCall_1_2_0_1; }
	}

	public class FillElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fill");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFillKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTfAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cTfTextFieldParserRuleCall_1_0_0 = (RuleCall)cTfAssignment_1_0.eContents().get(0);
		private final Assignment cPassAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cPassPasswordParserRuleCall_1_1_0 = (RuleCall)cPassAssignment_1_1.eContents().get(0);
		private final Assignment cVAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final CrossReference cVVariableCrossReference_1_2_0 = (CrossReference)cVAssignment_1_2.eContents().get(0);
		private final RuleCall cVVariableIDTerminalRuleCall_1_2_0_1 = (RuleCall)cVVariableCrossReference_1_2_0.eContents().get(1);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInputAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInputSTRINGTerminalRuleCall_3_0 = (RuleCall)cInputAssignment_3.eContents().get(0);
		
		//Fill:
		//	"fill" (tf=TextField | pass=Password | v=[Variable]) "with" input=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"fill" (tf=TextField | pass=Password | v=[Variable]) "with" input=STRING
		public Group getGroup() { return cGroup; }

		//"fill"
		public Keyword getFillKeyword_0() { return cFillKeyword_0; }

		//tf=TextField | pass=Password | v=[Variable]
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//tf=TextField
		public Assignment getTfAssignment_1_0() { return cTfAssignment_1_0; }

		//TextField
		public RuleCall getTfTextFieldParserRuleCall_1_0_0() { return cTfTextFieldParserRuleCall_1_0_0; }

		//pass=Password
		public Assignment getPassAssignment_1_1() { return cPassAssignment_1_1; }

		//Password
		public RuleCall getPassPasswordParserRuleCall_1_1_0() { return cPassPasswordParserRuleCall_1_1_0; }

		//v=[Variable]
		public Assignment getVAssignment_1_2() { return cVAssignment_1_2; }

		//[Variable]
		public CrossReference getVVariableCrossReference_1_2_0() { return cVVariableCrossReference_1_2_0; }

		//ID
		public RuleCall getVVariableIDTerminalRuleCall_1_2_0_1() { return cVVariableIDTerminalRuleCall_1_2_0_1; }

		//"with"
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }

		//input=STRING
		public Assignment getInputAssignment_3() { return cInputAssignment_3; }

		//STRING
		public RuleCall getInputSTRINGTerminalRuleCall_3_0() { return cInputSTRINGTerminalRuleCall_3_0; }
	}

	public class SelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Select");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cSbAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cSbCheckBoxParserRuleCall_1_0_0 = (RuleCall)cSbAssignment_1_0.eContents().get(0);
		private final Assignment cVAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cVVariableCrossReference_1_1_0 = (CrossReference)cVAssignment_1_1.eContents().get(0);
		private final RuleCall cVVariableIDTerminalRuleCall_1_1_0_1 = (RuleCall)cVVariableCrossReference_1_1_0.eContents().get(1);
		
		//Select:
		//	"select" (sb=CheckBox | v=[Variable]);
		@Override public ParserRule getRule() { return rule; }

		//"select" (sb=CheckBox | v=[Variable])
		public Group getGroup() { return cGroup; }

		//"select"
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }

		//sb=CheckBox | v=[Variable]
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//sb=CheckBox
		public Assignment getSbAssignment_1_0() { return cSbAssignment_1_0; }

		//CheckBox
		public RuleCall getSbCheckBoxParserRuleCall_1_0_0() { return cSbCheckBoxParserRuleCall_1_0_0; }

		//v=[Variable]
		public Assignment getVAssignment_1_1() { return cVAssignment_1_1; }

		//[Variable]
		public CrossReference getVVariableCrossReference_1_1_0() { return cVVariableCrossReference_1_1_0; }

		//ID
		public RuleCall getVVariableIDTerminalRuleCall_1_1_0_1() { return cVVariableIDTerminalRuleCall_1_1_0_1; }
	}

	public class CheckIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CheckIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cArgsSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cArgsAssignment_1_0.eContents().get(0);
		private final Assignment cV1Assignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cV1VariableCrossReference_1_1_0 = (CrossReference)cV1Assignment_1_1.eContents().get(0);
		private final RuleCall cV1VariableIDTerminalRuleCall_1_1_0_1 = (RuleCall)cV1VariableCrossReference_1_1_0.eContents().get(1);
		private final Keyword cIsInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cLinKToCheckAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cLinKToCheckSTRINGTerminalRuleCall_3_0_0 = (RuleCall)cLinKToCheckAssignment_3_0.eContents().get(0);
		private final Assignment cV2Assignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final CrossReference cV2VariableCrossReference_3_1_0 = (CrossReference)cV2Assignment_3_1.eContents().get(0);
		private final RuleCall cV2VariableIDTerminalRuleCall_3_1_0_1 = (RuleCall)cV2VariableCrossReference_3_1_0.eContents().get(1);
		
		//CheckIf:
		//	"checkIf" (args=STRING | v1=[Variable]) "isIn" (linKToCheck=STRING | v2=[Variable]);
		@Override public ParserRule getRule() { return rule; }

		//"checkIf" (args=STRING | v1=[Variable]) "isIn" (linKToCheck=STRING | v2=[Variable])
		public Group getGroup() { return cGroup; }

		//"checkIf"
		public Keyword getCheckIfKeyword_0() { return cCheckIfKeyword_0; }

		//args=STRING | v1=[Variable]
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//args=STRING
		public Assignment getArgsAssignment_1_0() { return cArgsAssignment_1_0; }

		//STRING
		public RuleCall getArgsSTRINGTerminalRuleCall_1_0_0() { return cArgsSTRINGTerminalRuleCall_1_0_0; }

		//v1=[Variable]
		public Assignment getV1Assignment_1_1() { return cV1Assignment_1_1; }

		//[Variable]
		public CrossReference getV1VariableCrossReference_1_1_0() { return cV1VariableCrossReference_1_1_0; }

		//ID
		public RuleCall getV1VariableIDTerminalRuleCall_1_1_0_1() { return cV1VariableIDTerminalRuleCall_1_1_0_1; }

		//"isIn"
		public Keyword getIsInKeyword_2() { return cIsInKeyword_2; }

		//linKToCheck=STRING | v2=[Variable]
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//linKToCheck=STRING
		public Assignment getLinKToCheckAssignment_3_0() { return cLinKToCheckAssignment_3_0; }

		//STRING
		public RuleCall getLinKToCheckSTRINGTerminalRuleCall_3_0_0() { return cLinKToCheckSTRINGTerminalRuleCall_3_0_0; }

		//v2=[Variable]
		public Assignment getV2Assignment_3_1() { return cV2Assignment_3_1; }

		//[Variable]
		public CrossReference getV2VariableCrossReference_3_1_0() { return cV2VariableCrossReference_3_1_0; }

		//ID
		public RuleCall getV2VariableIDTerminalRuleCall_3_1_0_1() { return cV2VariableIDTerminalRuleCall_3_1_0_1; }
	}

	public class ClearElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Clear");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClearKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cTTextFieldParserRuleCall_1_0_0 = (RuleCall)cTAssignment_1_0.eContents().get(0);
		private final Assignment cPAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cPPasswordParserRuleCall_1_1_0 = (RuleCall)cPAssignment_1_1.eContents().get(0);
		private final Assignment cVAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final CrossReference cVVariableCrossReference_1_2_0 = (CrossReference)cVAssignment_1_2.eContents().get(0);
		private final RuleCall cVVariableIDTerminalRuleCall_1_2_0_1 = (RuleCall)cVVariableCrossReference_1_2_0.eContents().get(1);
		
		//Clear:
		//	"clear" (t=TextField | p=Password | v=[Variable]);
		@Override public ParserRule getRule() { return rule; }

		//"clear" (t=TextField | p=Password | v=[Variable])
		public Group getGroup() { return cGroup; }

		//"clear"
		public Keyword getClearKeyword_0() { return cClearKeyword_0; }

		//t=TextField | p=Password | v=[Variable]
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//t=TextField
		public Assignment getTAssignment_1_0() { return cTAssignment_1_0; }

		//TextField
		public RuleCall getTTextFieldParserRuleCall_1_0_0() { return cTTextFieldParserRuleCall_1_0_0; }

		//p=Password
		public Assignment getPAssignment_1_1() { return cPAssignment_1_1; }

		//Password
		public RuleCall getPPasswordParserRuleCall_1_1_0() { return cPPasswordParserRuleCall_1_1_0; }

		//v=[Variable]
		public Assignment getVAssignment_1_2() { return cVAssignment_1_2; }

		//[Variable]
		public CrossReference getVVariableCrossReference_1_2_0() { return cVVariableCrossReference_1_2_0; }

		//ID
		public RuleCall getVVariableIDTerminalRuleCall_1_2_0_1() { return cVVariableIDTerminalRuleCall_1_2_0_1; }
	}

	public class BooleanConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cArg1Assignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cArg1Alternatives_0_0_0 = (Alternatives)cArg1Assignment_0_0.eContents().get(0);
		private final RuleCall cArg1WebPageObjParserRuleCall_0_0_0_0 = (RuleCall)cArg1Alternatives_0_0_0.eContents().get(0);
		private final CrossReference cArg1VariableCrossReference_0_0_0_1 = (CrossReference)cArg1Alternatives_0_0_0.eContents().get(1);
		private final RuleCall cArg1VariableIDTerminalRuleCall_0_0_0_1_1 = (RuleCall)cArg1VariableCrossReference_0_0_0_1.eContents().get(1);
		private final Keyword cEqualsKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cArg2Assignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final Alternatives cArg2Alternatives_0_2_0 = (Alternatives)cArg2Assignment_0_2.eContents().get(0);
		private final RuleCall cArg2WebPageObjParserRuleCall_0_2_0_0 = (RuleCall)cArg2Alternatives_0_2_0.eContents().get(0);
		private final CrossReference cArg2VariableCrossReference_0_2_0_1 = (CrossReference)cArg2Alternatives_0_2_0.eContents().get(1);
		private final RuleCall cArg2VariableIDTerminalRuleCall_0_2_0_1_1 = (RuleCall)cArg2VariableCrossReference_0_2_0_1.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cArg1Assignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cArg1Alternatives_1_0_0 = (Alternatives)cArg1Assignment_1_0.eContents().get(0);
		private final RuleCall cArg1WebPageObjParserRuleCall_1_0_0_0 = (RuleCall)cArg1Alternatives_1_0_0.eContents().get(0);
		private final CrossReference cArg1VariableCrossReference_1_0_0_1 = (CrossReference)cArg1Alternatives_1_0_0.eContents().get(1);
		private final RuleCall cArg1VariableIDTerminalRuleCall_1_0_0_1_1 = (RuleCall)cArg1VariableCrossReference_1_0_0_1.eContents().get(1);
		private final Keyword cNotEqualsKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cArg2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Alternatives cArg2Alternatives_1_2_0 = (Alternatives)cArg2Assignment_1_2.eContents().get(0);
		private final RuleCall cArg2WebPageObjParserRuleCall_1_2_0_0 = (RuleCall)cArg2Alternatives_1_2_0.eContents().get(0);
		private final CrossReference cArg2VariableCrossReference_1_2_0_1 = (CrossReference)cArg2Alternatives_1_2_0.eContents().get(1);
		private final RuleCall cArg2VariableIDTerminalRuleCall_1_2_0_1_1 = (RuleCall)cArg2VariableCrossReference_1_2_0_1.eContents().get(1);
		private final Keyword cTrueKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cFalseKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cArg1Assignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Alternatives cArg1Alternatives_4_0_0 = (Alternatives)cArg1Assignment_4_0.eContents().get(0);
		private final RuleCall cArg1WebPageObjParserRuleCall_4_0_0_0 = (RuleCall)cArg1Alternatives_4_0_0.eContents().get(0);
		private final CrossReference cArg1VariableCrossReference_4_0_0_1 = (CrossReference)cArg1Alternatives_4_0_0.eContents().get(1);
		private final RuleCall cArg1VariableIDTerminalRuleCall_4_0_0_1_1 = (RuleCall)cArg1VariableCrossReference_4_0_0_1.eContents().get(1);
		private final Keyword cIsEmptyKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cArg1Assignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Alternatives cArg1Alternatives_5_0_0 = (Alternatives)cArg1Assignment_5_0.eContents().get(0);
		private final RuleCall cArg1WebPageObjParserRuleCall_5_0_0_0 = (RuleCall)cArg1Alternatives_5_0_0.eContents().get(0);
		private final CrossReference cArg1VariableCrossReference_5_0_0_1 = (CrossReference)cArg1Alternatives_5_0_0.eContents().get(1);
		private final RuleCall cArg1VariableIDTerminalRuleCall_5_0_0_1_1 = (RuleCall)cArg1VariableCrossReference_5_0_0_1.eContents().get(1);
		private final Keyword cIsNotEmptyKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Assignment cArgAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Alternatives cArgAlternatives_6_0_0 = (Alternatives)cArgAssignment_6_0.eContents().get(0);
		private final RuleCall cArgWebPageObjParserRuleCall_6_0_0_0 = (RuleCall)cArgAlternatives_6_0_0.eContents().get(0);
		private final CrossReference cArgVariableCrossReference_6_0_0_1 = (CrossReference)cArgAlternatives_6_0_0.eContents().get(1);
		private final RuleCall cArgVariableIDTerminalRuleCall_6_0_0_1_1 = (RuleCall)cArgVariableCrossReference_6_0_0_1.eContents().get(1);
		private final Keyword cExistKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cNotKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cBoolAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final Alternatives cBoolAlternatives_7_2_0 = (Alternatives)cBoolAssignment_7_2.eContents().get(0);
		private final RuleCall cBoolBooleanConditionParserRuleCall_7_2_0_0 = (RuleCall)cBoolAlternatives_7_2_0.eContents().get(0);
		private final CrossReference cBoolVariableCrossReference_7_2_0_1 = (CrossReference)cBoolAlternatives_7_2_0.eContents().get(1);
		private final RuleCall cBoolVariableIDTerminalRuleCall_7_2_0_1_1 = (RuleCall)cBoolVariableCrossReference_7_2_0_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		
		//BooleanCondition:
		//	arg1=(WebPageObj | [Variable]) "equals" arg2=(WebPageObj | [Variable]) | arg1=(WebPageObj | [Variable]) "notEquals"
		//	arg2=(WebPageObj | [Variable]) | "true" | "false" | arg1=(WebPageObj | [Variable]) "isEmpty" | arg1=(WebPageObj |
		//	[Variable]) "isNotEmpty" | arg=(WebPageObj | [Variable]) "exist" | "Not" "(" bool=(BooleanCondition | [Variable])
		//	")";
		@Override public ParserRule getRule() { return rule; }

		//arg1=(WebPageObj | [Variable]) "equals" arg2=(WebPageObj | [Variable]) | arg1=(WebPageObj | [Variable]) "notEquals"
		//arg2=(WebPageObj | [Variable]) | "true" | "false" | arg1=(WebPageObj | [Variable]) "isEmpty" | arg1=(WebPageObj |
		//[Variable]) "isNotEmpty" | arg=(WebPageObj | [Variable]) "exist" | "Not" "(" bool=(BooleanCondition | [Variable]) ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//arg1=(WebPageObj | [Variable]) "equals" arg2=(WebPageObj | [Variable])
		public Group getGroup_0() { return cGroup_0; }

		//arg1=(WebPageObj | [Variable])
		public Assignment getArg1Assignment_0_0() { return cArg1Assignment_0_0; }

		//(WebPageObj | [Variable])
		public Alternatives getArg1Alternatives_0_0_0() { return cArg1Alternatives_0_0_0; }

		//WebPageObj
		public RuleCall getArg1WebPageObjParserRuleCall_0_0_0_0() { return cArg1WebPageObjParserRuleCall_0_0_0_0; }

		//[Variable]
		public CrossReference getArg1VariableCrossReference_0_0_0_1() { return cArg1VariableCrossReference_0_0_0_1; }

		//ID
		public RuleCall getArg1VariableIDTerminalRuleCall_0_0_0_1_1() { return cArg1VariableIDTerminalRuleCall_0_0_0_1_1; }

		//"equals"
		public Keyword getEqualsKeyword_0_1() { return cEqualsKeyword_0_1; }

		//arg2=(WebPageObj | [Variable])
		public Assignment getArg2Assignment_0_2() { return cArg2Assignment_0_2; }

		//(WebPageObj | [Variable])
		public Alternatives getArg2Alternatives_0_2_0() { return cArg2Alternatives_0_2_0; }

		//WebPageObj
		public RuleCall getArg2WebPageObjParserRuleCall_0_2_0_0() { return cArg2WebPageObjParserRuleCall_0_2_0_0; }

		//[Variable]
		public CrossReference getArg2VariableCrossReference_0_2_0_1() { return cArg2VariableCrossReference_0_2_0_1; }

		//ID
		public RuleCall getArg2VariableIDTerminalRuleCall_0_2_0_1_1() { return cArg2VariableIDTerminalRuleCall_0_2_0_1_1; }

		//arg1=(WebPageObj | [Variable]) "notEquals" arg2=(WebPageObj | [Variable])
		public Group getGroup_1() { return cGroup_1; }

		//arg1=(WebPageObj | [Variable])
		public Assignment getArg1Assignment_1_0() { return cArg1Assignment_1_0; }

		//(WebPageObj | [Variable])
		public Alternatives getArg1Alternatives_1_0_0() { return cArg1Alternatives_1_0_0; }

		//WebPageObj
		public RuleCall getArg1WebPageObjParserRuleCall_1_0_0_0() { return cArg1WebPageObjParserRuleCall_1_0_0_0; }

		//[Variable]
		public CrossReference getArg1VariableCrossReference_1_0_0_1() { return cArg1VariableCrossReference_1_0_0_1; }

		//ID
		public RuleCall getArg1VariableIDTerminalRuleCall_1_0_0_1_1() { return cArg1VariableIDTerminalRuleCall_1_0_0_1_1; }

		//"notEquals"
		public Keyword getNotEqualsKeyword_1_1() { return cNotEqualsKeyword_1_1; }

		//arg2=(WebPageObj | [Variable])
		public Assignment getArg2Assignment_1_2() { return cArg2Assignment_1_2; }

		//(WebPageObj | [Variable])
		public Alternatives getArg2Alternatives_1_2_0() { return cArg2Alternatives_1_2_0; }

		//WebPageObj
		public RuleCall getArg2WebPageObjParserRuleCall_1_2_0_0() { return cArg2WebPageObjParserRuleCall_1_2_0_0; }

		//[Variable]
		public CrossReference getArg2VariableCrossReference_1_2_0_1() { return cArg2VariableCrossReference_1_2_0_1; }

		//ID
		public RuleCall getArg2VariableIDTerminalRuleCall_1_2_0_1_1() { return cArg2VariableIDTerminalRuleCall_1_2_0_1_1; }

		//"true"
		public Keyword getTrueKeyword_2() { return cTrueKeyword_2; }

		//"false"
		public Keyword getFalseKeyword_3() { return cFalseKeyword_3; }

		//arg1=(WebPageObj | [Variable]) "isEmpty"
		public Group getGroup_4() { return cGroup_4; }

		//arg1=(WebPageObj | [Variable])
		public Assignment getArg1Assignment_4_0() { return cArg1Assignment_4_0; }

		//(WebPageObj | [Variable])
		public Alternatives getArg1Alternatives_4_0_0() { return cArg1Alternatives_4_0_0; }

		//WebPageObj
		public RuleCall getArg1WebPageObjParserRuleCall_4_0_0_0() { return cArg1WebPageObjParserRuleCall_4_0_0_0; }

		//[Variable]
		public CrossReference getArg1VariableCrossReference_4_0_0_1() { return cArg1VariableCrossReference_4_0_0_1; }

		//ID
		public RuleCall getArg1VariableIDTerminalRuleCall_4_0_0_1_1() { return cArg1VariableIDTerminalRuleCall_4_0_0_1_1; }

		//"isEmpty"
		public Keyword getIsEmptyKeyword_4_1() { return cIsEmptyKeyword_4_1; }

		//arg1=(WebPageObj | [Variable]) "isNotEmpty"
		public Group getGroup_5() { return cGroup_5; }

		//arg1=(WebPageObj | [Variable])
		public Assignment getArg1Assignment_5_0() { return cArg1Assignment_5_0; }

		//(WebPageObj | [Variable])
		public Alternatives getArg1Alternatives_5_0_0() { return cArg1Alternatives_5_0_0; }

		//WebPageObj
		public RuleCall getArg1WebPageObjParserRuleCall_5_0_0_0() { return cArg1WebPageObjParserRuleCall_5_0_0_0; }

		//[Variable]
		public CrossReference getArg1VariableCrossReference_5_0_0_1() { return cArg1VariableCrossReference_5_0_0_1; }

		//ID
		public RuleCall getArg1VariableIDTerminalRuleCall_5_0_0_1_1() { return cArg1VariableIDTerminalRuleCall_5_0_0_1_1; }

		//"isNotEmpty"
		public Keyword getIsNotEmptyKeyword_5_1() { return cIsNotEmptyKeyword_5_1; }

		//arg=(WebPageObj | [Variable]) "exist"
		public Group getGroup_6() { return cGroup_6; }

		//arg=(WebPageObj | [Variable])
		public Assignment getArgAssignment_6_0() { return cArgAssignment_6_0; }

		//(WebPageObj | [Variable])
		public Alternatives getArgAlternatives_6_0_0() { return cArgAlternatives_6_0_0; }

		//WebPageObj
		public RuleCall getArgWebPageObjParserRuleCall_6_0_0_0() { return cArgWebPageObjParserRuleCall_6_0_0_0; }

		//[Variable]
		public CrossReference getArgVariableCrossReference_6_0_0_1() { return cArgVariableCrossReference_6_0_0_1; }

		//ID
		public RuleCall getArgVariableIDTerminalRuleCall_6_0_0_1_1() { return cArgVariableIDTerminalRuleCall_6_0_0_1_1; }

		//"exist"
		public Keyword getExistKeyword_6_1() { return cExistKeyword_6_1; }

		//"Not" "(" bool=(BooleanCondition | [Variable]) ")"
		public Group getGroup_7() { return cGroup_7; }

		//"Not"
		public Keyword getNotKeyword_7_0() { return cNotKeyword_7_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_7_1() { return cLeftParenthesisKeyword_7_1; }

		//bool=(BooleanCondition | [Variable])
		public Assignment getBoolAssignment_7_2() { return cBoolAssignment_7_2; }

		//(BooleanCondition | [Variable])
		public Alternatives getBoolAlternatives_7_2_0() { return cBoolAlternatives_7_2_0; }

		//BooleanCondition
		public RuleCall getBoolBooleanConditionParserRuleCall_7_2_0_0() { return cBoolBooleanConditionParserRuleCall_7_2_0_0; }

		//[Variable]
		public CrossReference getBoolVariableCrossReference_7_2_0_1() { return cBoolVariableCrossReference_7_2_0_1; }

		//ID
		public RuleCall getBoolVariableIDTerminalRuleCall_7_2_0_1_1() { return cBoolVariableIDTerminalRuleCall_7_2_0_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_7_3() { return cRightParenthesisKeyword_7_3; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIfCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cIfCondAlternatives_2_0 = (Alternatives)cIfCondAssignment_2.eContents().get(0);
		private final RuleCall cIfCondBooleanConditionParserRuleCall_2_0_0 = (RuleCall)cIfCondAlternatives_2_0.eContents().get(0);
		private final CrossReference cIfCondVariableCrossReference_2_0_1 = (CrossReference)cIfCondAlternatives_2_0.eContents().get(1);
		private final RuleCall cIfCondVariableIDTerminalRuleCall_2_0_1_1 = (RuleCall)cIfCondVariableCrossReference_2_0_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFuncAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFuncFunctionParserRuleCall_5_0 = (RuleCall)cFuncAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cElseIfKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cElseifCondsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final Alternatives cElseifCondsAlternatives_7_2_0 = (Alternatives)cElseifCondsAssignment_7_2.eContents().get(0);
		private final RuleCall cElseifCondsBooleanConditionParserRuleCall_7_2_0_0 = (RuleCall)cElseifCondsAlternatives_7_2_0.eContents().get(0);
		private final CrossReference cElseifCondsVariableCrossReference_7_2_0_1 = (CrossReference)cElseifCondsAlternatives_7_2_0.eContents().get(1);
		private final RuleCall cElseifCondsVariableIDTerminalRuleCall_7_2_0_1_1 = (RuleCall)cElseifCondsVariableCrossReference_7_2_0_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Assignment cFuncAssignment_7_5 = (Assignment)cGroup_7.eContents().get(5);
		private final RuleCall cFuncFunctionParserRuleCall_7_5_0 = (RuleCall)cFuncAssignment_7_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_6 = (Keyword)cGroup_7.eContents().get(6);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cElseKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cFuncAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cFuncFunctionParserRuleCall_8_2_0 = (RuleCall)cFuncAssignment_8_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		
		//Condition:
		//	"if" "(" ifCond=(BooleanCondition | [Variable]) ")" "{" func+=Function+ "}" ("else if" "("
		//	elseifConds+=(BooleanCondition | [Variable]) ")" "{" func+=Function+ "}")* ("else" "{" func+=Function+ "}")*;
		@Override public ParserRule getRule() { return rule; }

		//"if" "(" ifCond=(BooleanCondition | [Variable]) ")" "{" func+=Function+ "}" ("else if" "("
		//elseifConds+=(BooleanCondition | [Variable]) ")" "{" func+=Function+ "}")* ("else" "{" func+=Function+ "}")*
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ifCond=(BooleanCondition | [Variable])
		public Assignment getIfCondAssignment_2() { return cIfCondAssignment_2; }

		//(BooleanCondition | [Variable])
		public Alternatives getIfCondAlternatives_2_0() { return cIfCondAlternatives_2_0; }

		//BooleanCondition
		public RuleCall getIfCondBooleanConditionParserRuleCall_2_0_0() { return cIfCondBooleanConditionParserRuleCall_2_0_0; }

		//[Variable]
		public CrossReference getIfCondVariableCrossReference_2_0_1() { return cIfCondVariableCrossReference_2_0_1; }

		//ID
		public RuleCall getIfCondVariableIDTerminalRuleCall_2_0_1_1() { return cIfCondVariableIDTerminalRuleCall_2_0_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//func+=Function+
		public Assignment getFuncAssignment_5() { return cFuncAssignment_5; }

		//Function
		public RuleCall getFuncFunctionParserRuleCall_5_0() { return cFuncFunctionParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//("else if" "(" elseifConds+=(BooleanCondition | [Variable]) ")" "{" func+=Function+ "}")*
		public Group getGroup_7() { return cGroup_7; }

		//"else if"
		public Keyword getElseIfKeyword_7_0() { return cElseIfKeyword_7_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_7_1() { return cLeftParenthesisKeyword_7_1; }

		//elseifConds+=(BooleanCondition | [Variable])
		public Assignment getElseifCondsAssignment_7_2() { return cElseifCondsAssignment_7_2; }

		//(BooleanCondition | [Variable])
		public Alternatives getElseifCondsAlternatives_7_2_0() { return cElseifCondsAlternatives_7_2_0; }

		//BooleanCondition
		public RuleCall getElseifCondsBooleanConditionParserRuleCall_7_2_0_0() { return cElseifCondsBooleanConditionParserRuleCall_7_2_0_0; }

		//[Variable]
		public CrossReference getElseifCondsVariableCrossReference_7_2_0_1() { return cElseifCondsVariableCrossReference_7_2_0_1; }

		//ID
		public RuleCall getElseifCondsVariableIDTerminalRuleCall_7_2_0_1_1() { return cElseifCondsVariableIDTerminalRuleCall_7_2_0_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_7_3() { return cRightParenthesisKeyword_7_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_4() { return cLeftCurlyBracketKeyword_7_4; }

		//func+=Function+
		public Assignment getFuncAssignment_7_5() { return cFuncAssignment_7_5; }

		//Function
		public RuleCall getFuncFunctionParserRuleCall_7_5_0() { return cFuncFunctionParserRuleCall_7_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_6() { return cRightCurlyBracketKeyword_7_6; }

		//("else" "{" func+=Function+ "}")*
		public Group getGroup_8() { return cGroup_8; }

		//"else"
		public Keyword getElseKeyword_8_0() { return cElseKeyword_8_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8_1() { return cLeftCurlyBracketKeyword_8_1; }

		//func+=Function+
		public Assignment getFuncAssignment_8_2() { return cFuncAssignment_8_2; }

		//Function
		public RuleCall getFuncFunctionParserRuleCall_8_2_0() { return cFuncFunctionParserRuleCall_8_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8_3() { return cRightCurlyBracketKeyword_8_3; }
	}

	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Loop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFuncAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFuncFunctionParserRuleCall_2_0 = (RuleCall)cFuncAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cWhileKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBoolAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Alternatives cBoolAlternatives_6_0 = (Alternatives)cBoolAssignment_6.eContents().get(0);
		private final RuleCall cBoolBooleanConditionParserRuleCall_6_0_0 = (RuleCall)cBoolAlternatives_6_0.eContents().get(0);
		private final CrossReference cBoolVariableCrossReference_6_0_1 = (CrossReference)cBoolAlternatives_6_0.eContents().get(1);
		private final RuleCall cBoolVariableIDTerminalRuleCall_6_0_1_1 = (RuleCall)cBoolVariableCrossReference_6_0_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Loop:
		//	"do" "{" func+=Function+ "}" "while" "(" bool=(BooleanCondition | [Variable]) ")";
		@Override public ParserRule getRule() { return rule; }

		//"do" "{" func+=Function+ "}" "while" "(" bool=(BooleanCondition | [Variable]) ")"
		public Group getGroup() { return cGroup; }

		//"do"
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//func+=Function+
		public Assignment getFuncAssignment_2() { return cFuncAssignment_2; }

		//Function
		public RuleCall getFuncFunctionParserRuleCall_2_0() { return cFuncFunctionParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }

		//"while"
		public Keyword getWhileKeyword_4() { return cWhileKeyword_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }

		//bool=(BooleanCondition | [Variable])
		public Assignment getBoolAssignment_6() { return cBoolAssignment_6; }

		//(BooleanCondition | [Variable])
		public Alternatives getBoolAlternatives_6_0() { return cBoolAlternatives_6_0; }

		//BooleanCondition
		public RuleCall getBoolBooleanConditionParserRuleCall_6_0_0() { return cBoolBooleanConditionParserRuleCall_6_0_0; }

		//[Variable]
		public CrossReference getBoolVariableCrossReference_6_0_1() { return cBoolVariableCrossReference_6_0_1; }

		//ID
		public RuleCall getBoolVariableIDTerminalRuleCall_6_0_1_1() { return cBoolVariableIDTerminalRuleCall_6_0_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class WebPageObjElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WebPageObj");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTfAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTfTextFieldParserRuleCall_0_0 = (RuleCall)cTfAssignment_0.eContents().get(0);
		private final Assignment cPswAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPswPasswordParserRuleCall_1_0 = (RuleCall)cPswAssignment_1.eContents().get(0);
		private final Assignment cBtnAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cBtnButtonParserRuleCall_2_0 = (RuleCall)cBtnAssignment_2.eContents().get(0);
		private final Assignment cCkAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cCkCheckBoxParserRuleCall_3_0 = (RuleCall)cCkAssignment_3.eContents().get(0);
		private final Assignment cTAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cTTextParserRuleCall_4_0 = (RuleCall)cTAssignment_4.eContents().get(0);
		private final Assignment cLAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cLLinkParserRuleCall_5_0 = (RuleCall)cLAssignment_5.eContents().get(0);
		
		//WebPageObj:
		//	tf=TextField | psw=Password | btn=Button | ck=CheckBox | t=Text | l=Link;
		@Override public ParserRule getRule() { return rule; }

		//tf=TextField | psw=Password | btn=Button | ck=CheckBox | t=Text | l=Link
		public Alternatives getAlternatives() { return cAlternatives; }

		//tf=TextField
		public Assignment getTfAssignment_0() { return cTfAssignment_0; }

		//TextField
		public RuleCall getTfTextFieldParserRuleCall_0_0() { return cTfTextFieldParserRuleCall_0_0; }

		//psw=Password
		public Assignment getPswAssignment_1() { return cPswAssignment_1; }

		//Password
		public RuleCall getPswPasswordParserRuleCall_1_0() { return cPswPasswordParserRuleCall_1_0; }

		//btn=Button
		public Assignment getBtnAssignment_2() { return cBtnAssignment_2; }

		//Button
		public RuleCall getBtnButtonParserRuleCall_2_0() { return cBtnButtonParserRuleCall_2_0; }

		//ck=CheckBox
		public Assignment getCkAssignment_3() { return cCkAssignment_3; }

		//CheckBox
		public RuleCall getCkCheckBoxParserRuleCall_3_0() { return cCkCheckBoxParserRuleCall_3_0; }

		//t=Text
		public Assignment getTAssignment_4() { return cTAssignment_4; }

		//Text
		public RuleCall getTTextParserRuleCall_4_0() { return cTTextParserRuleCall_4_0; }

		//l=Link
		public Assignment getLAssignment_5() { return cLAssignment_5; }

		//Link
		public RuleCall getLLinkParserRuleCall_5_0() { return cLLinkParserRuleCall_5_0; }
	}

	public class TextFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUsernameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUsernameSTRINGTerminalRuleCall_1_0 = (RuleCall)cUsernameAssignment_1.eContents().get(0);
		
		//TextField:
		//	"textField" username=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"textField" username=STRING
		public Group getGroup() { return cGroup; }

		//"textField"
		public Keyword getTextFieldKeyword_0() { return cTextFieldKeyword_0; }

		//username=STRING
		public Assignment getUsernameAssignment_1() { return cUsernameAssignment_1; }

		//STRING
		public RuleCall getUsernameSTRINGTerminalRuleCall_1_0() { return cUsernameSTRINGTerminalRuleCall_1_0; }
	}

	public class PasswordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Password");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPasswordKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPasswordAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPasswordSTRINGTerminalRuleCall_1_0 = (RuleCall)cPasswordAssignment_1.eContents().get(0);
		
		//Password:
		//	"password" password=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"password" password=STRING
		public Group getGroup() { return cGroup; }

		//"password"
		public Keyword getPasswordKeyword_0() { return cPasswordKeyword_0; }

		//password=STRING
		public Assignment getPasswordAssignment_1() { return cPasswordAssignment_1; }

		//STRING
		public RuleCall getPasswordSTRINGTerminalRuleCall_1_0() { return cPasswordSTRINGTerminalRuleCall_1_0; }
	}

	public class ButtonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Button");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cButtonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cButtonAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cButtonSTRINGTerminalRuleCall_1_0 = (RuleCall)cButtonAssignment_1.eContents().get(0);
		
		//Button:
		//	"button" button=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"button" button=STRING
		public Group getGroup() { return cGroup; }

		//"button"
		public Keyword getButtonKeyword_0() { return cButtonKeyword_0; }

		//button=STRING
		public Assignment getButtonAssignment_1() { return cButtonAssignment_1; }

		//STRING
		public RuleCall getButtonSTRINGTerminalRuleCall_1_0() { return cButtonSTRINGTerminalRuleCall_1_0; }
	}

	public class CheckBoxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CheckBox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckBoxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCheckBoxAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCheckBoxSTRINGTerminalRuleCall_1_0 = (RuleCall)cCheckBoxAssignment_1.eContents().get(0);
		
		//CheckBox:
		//	"checkBox" checkBox=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"checkBox" checkBox=STRING
		public Group getGroup() { return cGroup; }

		//"checkBox"
		public Keyword getCheckBoxKeyword_0() { return cCheckBoxKeyword_0; }

		//checkBox=STRING
		public Assignment getCheckBoxAssignment_1() { return cCheckBoxAssignment_1; }

		//STRING
		public RuleCall getCheckBoxSTRINGTerminalRuleCall_1_0() { return cCheckBoxSTRINGTerminalRuleCall_1_0; }
	}

	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Text");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//Text:
		//	"text" text=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"text" text=STRING
		public Group getGroup() { return cGroup; }

		//"text"
		public Keyword getTextKeyword_0() { return cTextKeyword_0; }

		//text=STRING
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_0() { return cTextSTRINGTerminalRuleCall_1_0; }
	}

	public class LinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Link");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLinkAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLinkSTRINGTerminalRuleCall_1_0 = (RuleCall)cLinkAssignment_1.eContents().get(0);
		
		//Link:
		//	"link" link=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"link" link=STRING
		public Group getGroup() { return cGroup; }

		//"link"
		public Keyword getLinkKeyword_0() { return cLinkKeyword_0; }

		//link=STRING
		public Assignment getLinkAssignment_1() { return cLinkAssignment_1; }

		//STRING
		public RuleCall getLinkSTRINGTerminalRuleCall_1_0() { return cLinkSTRINGTerminalRuleCall_1_0; }
	}

	public class CollectionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Collections");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSSelectAllCheckboxesParserRuleCall_0_0 = (RuleCall)cSAssignment_0.eContents().get(0);
		private final Assignment cCAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCClickOnAllButtonsParserRuleCall_1_0 = (RuleCall)cCAssignment_1.eContents().get(0);
		private final Assignment cFAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cFFillAllTextFieldsParserRuleCall_2_0 = (RuleCall)cFAssignment_2.eContents().get(0);
		private final Assignment cGAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cGGoToAllLinksParserRuleCall_3_0 = (RuleCall)cGAssignment_3.eContents().get(0);
		
		//Collections:
		//	s=SelectAllCheckboxes | c=ClickOnAllButtons | f=FillAllTextFields | g=GoToAllLinks;
		@Override public ParserRule getRule() { return rule; }

		//s=SelectAllCheckboxes | c=ClickOnAllButtons | f=FillAllTextFields | g=GoToAllLinks
		public Alternatives getAlternatives() { return cAlternatives; }

		//s=SelectAllCheckboxes
		public Assignment getSAssignment_0() { return cSAssignment_0; }

		//SelectAllCheckboxes
		public RuleCall getSSelectAllCheckboxesParserRuleCall_0_0() { return cSSelectAllCheckboxesParserRuleCall_0_0; }

		//c=ClickOnAllButtons
		public Assignment getCAssignment_1() { return cCAssignment_1; }

		//ClickOnAllButtons
		public RuleCall getCClickOnAllButtonsParserRuleCall_1_0() { return cCClickOnAllButtonsParserRuleCall_1_0; }

		//f=FillAllTextFields
		public Assignment getFAssignment_2() { return cFAssignment_2; }

		//FillAllTextFields
		public RuleCall getFFillAllTextFieldsParserRuleCall_2_0() { return cFFillAllTextFieldsParserRuleCall_2_0; }

		//g=GoToAllLinks
		public Assignment getGAssignment_3() { return cGAssignment_3; }

		//GoToAllLinks
		public RuleCall getGGoToAllLinksParserRuleCall_3_0() { return cGGoToAllLinksParserRuleCall_3_0; }
	}

	public class SelectAllCheckboxesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectAllCheckboxes");
		private final Keyword cSelectAllCheckBoxesKeyword = (Keyword)rule.eContents().get(1);
		
		//SelectAllCheckboxes:
		//	"selectAllCheckBoxes";
		@Override public ParserRule getRule() { return rule; }

		//"selectAllCheckBoxes"
		public Keyword getSelectAllCheckBoxesKeyword() { return cSelectAllCheckBoxesKeyword; }
	}

	public class ClickOnAllButtonsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClickOnAllButtons");
		private final Keyword cClickOnAllButtonsKeyword = (Keyword)rule.eContents().get(1);
		
		//ClickOnAllButtons:
		//	"clickOnAllButtons";
		@Override public ParserRule getRule() { return rule; }

		//"clickOnAllButtons"
		public Keyword getClickOnAllButtonsKeyword() { return cClickOnAllButtonsKeyword; }
	}

	public class FillAllTextFieldsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FillAllTextFields");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFillAllTextFieldsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cInputAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cInputSTRINGTerminalRuleCall_2_0_0 = (RuleCall)cInputAssignment_2_0.eContents().get(0);
		private final Assignment cVAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final CrossReference cVVariableCrossReference_2_1_0 = (CrossReference)cVAssignment_2_1.eContents().get(0);
		private final RuleCall cVVariableIDTerminalRuleCall_2_1_0_1 = (RuleCall)cVVariableCrossReference_2_1_0.eContents().get(1);
		
		//FillAllTextFields:
		//	"fillAllTextFields" "with" (input=STRING | v=[Variable]);
		@Override public ParserRule getRule() { return rule; }

		//"fillAllTextFields" "with" (input=STRING | v=[Variable])
		public Group getGroup() { return cGroup; }

		//"fillAllTextFields"
		public Keyword getFillAllTextFieldsKeyword_0() { return cFillAllTextFieldsKeyword_0; }

		//"with"
		public Keyword getWithKeyword_1() { return cWithKeyword_1; }

		//input=STRING | v=[Variable]
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//input=STRING
		public Assignment getInputAssignment_2_0() { return cInputAssignment_2_0; }

		//STRING
		public RuleCall getInputSTRINGTerminalRuleCall_2_0_0() { return cInputSTRINGTerminalRuleCall_2_0_0; }

		//v=[Variable]
		public Assignment getVAssignment_2_1() { return cVAssignment_2_1; }

		//[Variable]
		public CrossReference getVVariableCrossReference_2_1_0() { return cVVariableCrossReference_2_1_0; }

		//ID
		public RuleCall getVVariableIDTerminalRuleCall_2_1_0_1() { return cVVariableIDTerminalRuleCall_2_1_0_1; }
	}

	public class GoToAllLinksElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GoToAllLinks");
		private final Keyword cGoToAllLinksKeyword = (Keyword)rule.eContents().get(1);
		
		//GoToAllLinks:
		//	"goToAllLinks";
		@Override public ParserRule getRule() { return rule; }

		//"goToAllLinks"
		public Keyword getGoToAllLinksKeyword() { return cGoToAllLinksKeyword; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOWebPageObjParserRuleCall_1_0 = (RuleCall)cOAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Variable:
		//	"var" o=WebPageObj name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"var" o=WebPageObj name=ID
		public Group getGroup() { return cGroup; }

		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//o=WebPageObj
		public Assignment getOAssignment_1() { return cOAssignment_1; }

		//WebPageObj
		public RuleCall getOWebPageObjParserRuleCall_1_0() { return cOWebPageObjParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class MemoriseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Memorise");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMemoriseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cObjAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cObjWebPageObjParserRuleCall_1_0 = (RuleCall)cObjAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVarAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cVarVariableCrossReference_3_0 = (CrossReference)cVarAssignment_3.eContents().get(0);
		private final RuleCall cVarVariableIDTerminalRuleCall_3_0_1 = (RuleCall)cVarVariableCrossReference_3_0.eContents().get(1);
		
		//Memorise:
		//	"memorise" obj=WebPageObj "in" var=[Variable];
		@Override public ParserRule getRule() { return rule; }

		//"memorise" obj=WebPageObj "in" var=[Variable]
		public Group getGroup() { return cGroup; }

		//"memorise"
		public Keyword getMemoriseKeyword_0() { return cMemoriseKeyword_0; }

		//obj=WebPageObj
		public Assignment getObjAssignment_1() { return cObjAssignment_1; }

		//WebPageObj
		public RuleCall getObjWebPageObjParserRuleCall_1_0() { return cObjWebPageObjParserRuleCall_1_0; }

		//"in"
		public Keyword getInKeyword_2() { return cInKeyword_2; }

		//var=[Variable]
		public Assignment getVarAssignment_3() { return cVarAssignment_3; }

		//[Variable]
		public CrossReference getVarVariableCrossReference_3_0() { return cVarVariableCrossReference_3_0; }

		//ID
		public RuleCall getVarVariableIDTerminalRuleCall_3_0_1() { return cVarVariableIDTerminalRuleCall_3_0_1; }
	}

	public class ParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameters");
		private final Assignment cParsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cParsSTRINGTerminalRuleCall_0 = (RuleCall)cParsAssignment.eContents().get(0);
		
		//Parameters:
		//	pars+=STRING*;
		@Override public ParserRule getRule() { return rule; }

		//pars+=STRING*
		public Assignment getParsAssignment() { return cParsAssignment; }

		//STRING
		public RuleCall getParsSTRINGTerminalRuleCall_0() { return cParsSTRINGTerminalRuleCall_0; }
	}

	public class ProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Procedure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcedureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cParamsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParamsParametersParserRuleCall_4_0 = (RuleCall)cParamsAssignment_4.eContents().get(0);
		private final Assignment cInsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInsInstructionsParserRuleCall_5_0 = (RuleCall)cInsAssignment_5.eContents().get(0);
		private final Keyword cEndProcedureKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Procedure:
		//	"procedure" name=ID "with" "Params" params=Parameters ins+=Instructions+ "endProcedure";
		@Override public ParserRule getRule() { return rule; }

		//"procedure" name=ID "with" "Params" params=Parameters ins+=Instructions+ "endProcedure"
		public Group getGroup() { return cGroup; }

		//"procedure"
		public Keyword getProcedureKeyword_0() { return cProcedureKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"with"
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }

		//"Params"
		public Keyword getParamsKeyword_3() { return cParamsKeyword_3; }

		//params=Parameters
		public Assignment getParamsAssignment_4() { return cParamsAssignment_4; }

		//Parameters
		public RuleCall getParamsParametersParserRuleCall_4_0() { return cParamsParametersParserRuleCall_4_0; }

		//ins+=Instructions+
		public Assignment getInsAssignment_5() { return cInsAssignment_5; }

		//Instructions
		public RuleCall getInsInstructionsParserRuleCall_5_0() { return cInsInstructionsParserRuleCall_5_0; }

		//"endProcedure"
		public Keyword getEndProcedureKeyword_6() { return cEndProcedureKeyword_6; }
	}
	
	
	private final WebBrowserElements pWebBrowser;
	private final OngletElements pOnglet;
	private final InstructionsElements pInstructions;
	private final ProcedureLaunchElements pProcedureLaunch;
	private final FunctionElements pFunction;
	private final GoToElements pGoTo;
	private final ClickOnElements pClickOn;
	private final FillElements pFill;
	private final SelectElements pSelect;
	private final CheckIfElements pCheckIf;
	private final ClearElements pClear;
	private final BooleanConditionElements pBooleanCondition;
	private final ConditionElements pCondition;
	private final LoopElements pLoop;
	private final WebPageObjElements pWebPageObj;
	private final TextFieldElements pTextField;
	private final PasswordElements pPassword;
	private final ButtonElements pButton;
	private final CheckBoxElements pCheckBox;
	private final TextElements pText;
	private final LinkElements pLink;
	private final CollectionsElements pCollections;
	private final SelectAllCheckboxesElements pSelectAllCheckboxes;
	private final ClickOnAllButtonsElements pClickOnAllButtons;
	private final FillAllTextFieldsElements pFillAllTextFields;
	private final GoToAllLinksElements pGoToAllLinks;
	private final VariableElements pVariable;
	private final MemoriseElements pMemorise;
	private final ParametersElements pParameters;
	private final ProcedureElements pProcedure;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BrowserGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pWebBrowser = new WebBrowserElements();
		this.pOnglet = new OngletElements();
		this.pInstructions = new InstructionsElements();
		this.pProcedureLaunch = new ProcedureLaunchElements();
		this.pFunction = new FunctionElements();
		this.pGoTo = new GoToElements();
		this.pClickOn = new ClickOnElements();
		this.pFill = new FillElements();
		this.pSelect = new SelectElements();
		this.pCheckIf = new CheckIfElements();
		this.pClear = new ClearElements();
		this.pBooleanCondition = new BooleanConditionElements();
		this.pCondition = new ConditionElements();
		this.pLoop = new LoopElements();
		this.pWebPageObj = new WebPageObjElements();
		this.pTextField = new TextFieldElements();
		this.pPassword = new PasswordElements();
		this.pButton = new ButtonElements();
		this.pCheckBox = new CheckBoxElements();
		this.pText = new TextElements();
		this.pLink = new LinkElements();
		this.pCollections = new CollectionsElements();
		this.pSelectAllCheckboxes = new SelectAllCheckboxesElements();
		this.pClickOnAllButtons = new ClickOnAllButtonsElements();
		this.pFillAllTextFields = new FillAllTextFieldsElements();
		this.pGoToAllLinks = new GoToAllLinksElements();
		this.pVariable = new VariableElements();
		this.pMemorise = new MemoriseElements();
		this.pParameters = new ParametersElements();
		this.pProcedure = new ProcedureElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.browser.Browser".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// *Model:
	//	'webBrowser' name=ID
	//	'open'
	//		onglets+=Onglet*
	//	'close';
	//	
	//Onglet:
	//	 'open' 'Onglet' ':' url=STRING	 	
	//	  ins=Instruction*  
	//	 'close';
	//
	//Instruction:
	//	function=Function |  
	//	ifcond+=Condition |
	//	loop+=Loop |
	//	coll = Collections |
	//	mem = Memorise |
	//	proc = Procedure |
	//	launchProc = ProcedureLaunch |
	//	variable = Variable
	//;
	//
	//Function:
	//	GoToLink |
	//	ClickOn |
	//	Fill |
	//	SelectCheckBox |	 
	//	CheckIf |
	//	Clear 
	//;
	//
	//GoToLink:
	//	'goTo' (link=Link | v=[Variable] )  
	//;
	//
	//ClickOn:
	//	'clickOn' ( b=Button | l=Link | v=[Variable] ) 
	//;
	//
	//Fill:
	//	'fill' (t=TextField | p=Password | v1=[Variable] ) 'with' (input=STRING | v2=[Variable])  	
	//;
	//
	//SelectCheckBox:
	//	'select' ( cb=CheckBox | v=[Variable] ) 
	//;
	//
	//CheckIf:
	//	'checkIf' ( args=STRING | v1=[Variable] ) 'isIn' (linkToCheck=STRING | v2=[Variable] ) 
	//;
	//
	//Clear:
	//	'clear' (t=TextField | p=Password | v=[Variable])
	//;
	//
	//Loop:
	//	'do' '{' funcs+=Function+ '}' 'while' '(' cond=BooleanCondition ')'
	//;
	//
	//Condition:
	//	'if'  '(' ifCond = BooleanCondition ')' 
	//		'{' (funcs+=Function+) '}' 
	//	( 'else if' '(' elseifConds += BooleanCondition ')' 
	//		(funcs+=Function+) 	)*
	//	( 'else' '{' ( funcs+=Function+)  '}'  )*  
	//;
	//
	//BooleanCondition:
	//	(arg1=WebPageObj | v1=[Variable]) 'equals' (arg2=WebPageObj | v2=[Variable] ) |
	//	(arg1=WebPageObj | v1=[Variable]) 'notEquals' (arg2=WebPageObj | v2=[Variable] )|
	//	'true' | 
	//	'false' | 
	//	(arg=WebPageObj | v=[Variable]) 'isEmpty' |
	//	(arg=WebPageObj | v=[Variable]) 'isNotEmpty' |
	//	(arg=WebPageObj | v=[Variable] ) 'exist' |
	//	'not' '(' (arg=WebPageObj | v=[Variable]) ')'
	//;
	//
	//WebPageObj:
	//	TextField |
	//	Password |
	//	Button |
	//	CheckBox |
	//	Text |
	//	Link	 		
	//;
	//
	//TextField:
	//	'textField' username=STRING
	//;
	//
	//Password:
	//	'password' password=STRING 
	//;
	//
	//Button:
	//	'button' button=STRING 
	//;
	//
	//CheckBox:
	//	'checkBox' checkBox=STRING 
	//;
	//
	//Text:
	//	'text' text=STRING
	//;
	//
	//Link:
	//	'link' link=STRING
	//;
	//
	//Collections:
	//	SelectAllCheckboxes | 
	//	ClickOnAllButtons |
	//	FillAllTextFields |
	//	GoToAllLinks
	//;
	//
	//SelectAllCheckboxes:
	//	'selectAllCheckBoxes'
	//;
	//
	//ClickOnAllButtons :
	//	'clickOnAllButtons'
	//;
	//
	//FillAllTextFields:
	//	'fillAllTextFields' 'with' (input=STRING | v=[Variable])
	//;
	//
	//GoToAllLinks:
	//	'goToAllLinks'
	//;
	//
	//Memorise:
	//	'memorise' obj=WebPageObj 'in' variable=[Variable]
	//;
	//
	//Variable:
	//	'var' (o=WebPageObj) (name=ID)
	//;
	//
	//Procedure:
	//	'procedure' name=ID 'with' 'Params'	
	//	parameters=Parameters
	//	inst+=Instruction+
	//	'endProcedure'
	//;
	//
	//Parameters:
	//	pars+=STRING*
	//;
	//
	//ProcedureLaunch:
	//	'launchProcedure' proc=[Procedure]
	//;* / WebBrowser:
	//	"webBrowser" name=ID "open" onglets+=Onglet* "close";
	public WebBrowserElements getWebBrowserAccess() {
		return pWebBrowser;
	}
	
	public ParserRule getWebBrowserRule() {
		return getWebBrowserAccess().getRule();
	}

	//Onglet:
	//	"open" "Onglet" ":" url=STRING ins+=Instructions* "close";
	public OngletElements getOngletAccess() {
		return pOnglet;
	}
	
	public ParserRule getOngletRule() {
		return getOngletAccess().getRule();
	}

	//Instructions:
	//	func=Function | ifCond=Condition | loop=Loop | coll=Collections | mem=Memorise | procs=Procedure | l=ProcedureLaunch
	//	| v=Variable;
	public InstructionsElements getInstructionsAccess() {
		return pInstructions;
	}
	
	public ParserRule getInstructionsRule() {
		return getInstructionsAccess().getRule();
	}

	//ProcedureLaunch:
	//	"launchProcedure" proc=[Procedure];
	public ProcedureLaunchElements getProcedureLaunchAccess() {
		return pProcedureLaunch;
	}
	
	public ParserRule getProcedureLaunchRule() {
		return getProcedureLaunchAccess().getRule();
	}

	//Function:
	//	gtl=GoTo | cob=ClickOn | ftf=Fill | sel=Select | ci=CheckIf | cl=Clear;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//GoTo:
	//	"goTo" (link=Link | v=[Variable]);
	public GoToElements getGoToAccess() {
		return pGoTo;
	}
	
	public ParserRule getGoToRule() {
		return getGoToAccess().getRule();
	}

	//ClickOn:
	//	"clickOn" (button=Button | link=Link | v=[Variable]);
	public ClickOnElements getClickOnAccess() {
		return pClickOn;
	}
	
	public ParserRule getClickOnRule() {
		return getClickOnAccess().getRule();
	}

	//Fill:
	//	"fill" (tf=TextField | pass=Password | v=[Variable]) "with" input=STRING;
	public FillElements getFillAccess() {
		return pFill;
	}
	
	public ParserRule getFillRule() {
		return getFillAccess().getRule();
	}

	//Select:
	//	"select" (sb=CheckBox | v=[Variable]);
	public SelectElements getSelectAccess() {
		return pSelect;
	}
	
	public ParserRule getSelectRule() {
		return getSelectAccess().getRule();
	}

	//CheckIf:
	//	"checkIf" (args=STRING | v1=[Variable]) "isIn" (linKToCheck=STRING | v2=[Variable]);
	public CheckIfElements getCheckIfAccess() {
		return pCheckIf;
	}
	
	public ParserRule getCheckIfRule() {
		return getCheckIfAccess().getRule();
	}

	//Clear:
	//	"clear" (t=TextField | p=Password | v=[Variable]);
	public ClearElements getClearAccess() {
		return pClear;
	}
	
	public ParserRule getClearRule() {
		return getClearAccess().getRule();
	}

	//BooleanCondition:
	//	arg1=(WebPageObj | [Variable]) "equals" arg2=(WebPageObj | [Variable]) | arg1=(WebPageObj | [Variable]) "notEquals"
	//	arg2=(WebPageObj | [Variable]) | "true" | "false" | arg1=(WebPageObj | [Variable]) "isEmpty" | arg1=(WebPageObj |
	//	[Variable]) "isNotEmpty" | arg=(WebPageObj | [Variable]) "exist" | "Not" "(" bool=(BooleanCondition | [Variable])
	//	")";
	public BooleanConditionElements getBooleanConditionAccess() {
		return pBooleanCondition;
	}
	
	public ParserRule getBooleanConditionRule() {
		return getBooleanConditionAccess().getRule();
	}

	//Condition:
	//	"if" "(" ifCond=(BooleanCondition | [Variable]) ")" "{" func+=Function+ "}" ("else if" "("
	//	elseifConds+=(BooleanCondition | [Variable]) ")" "{" func+=Function+ "}")* ("else" "{" func+=Function+ "}")*;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//Loop:
	//	"do" "{" func+=Function+ "}" "while" "(" bool=(BooleanCondition | [Variable]) ")";
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}

	//WebPageObj:
	//	tf=TextField | psw=Password | btn=Button | ck=CheckBox | t=Text | l=Link;
	public WebPageObjElements getWebPageObjAccess() {
		return pWebPageObj;
	}
	
	public ParserRule getWebPageObjRule() {
		return getWebPageObjAccess().getRule();
	}

	//TextField:
	//	"textField" username=STRING;
	public TextFieldElements getTextFieldAccess() {
		return pTextField;
	}
	
	public ParserRule getTextFieldRule() {
		return getTextFieldAccess().getRule();
	}

	//Password:
	//	"password" password=STRING;
	public PasswordElements getPasswordAccess() {
		return pPassword;
	}
	
	public ParserRule getPasswordRule() {
		return getPasswordAccess().getRule();
	}

	//Button:
	//	"button" button=STRING;
	public ButtonElements getButtonAccess() {
		return pButton;
	}
	
	public ParserRule getButtonRule() {
		return getButtonAccess().getRule();
	}

	//CheckBox:
	//	"checkBox" checkBox=STRING;
	public CheckBoxElements getCheckBoxAccess() {
		return pCheckBox;
	}
	
	public ParserRule getCheckBoxRule() {
		return getCheckBoxAccess().getRule();
	}

	//Text:
	//	"text" text=STRING;
	public TextElements getTextAccess() {
		return pText;
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}

	//Link:
	//	"link" link=STRING;
	public LinkElements getLinkAccess() {
		return pLink;
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}

	//Collections:
	//	s=SelectAllCheckboxes | c=ClickOnAllButtons | f=FillAllTextFields | g=GoToAllLinks;
	public CollectionsElements getCollectionsAccess() {
		return pCollections;
	}
	
	public ParserRule getCollectionsRule() {
		return getCollectionsAccess().getRule();
	}

	//SelectAllCheckboxes:
	//	"selectAllCheckBoxes";
	public SelectAllCheckboxesElements getSelectAllCheckboxesAccess() {
		return pSelectAllCheckboxes;
	}
	
	public ParserRule getSelectAllCheckboxesRule() {
		return getSelectAllCheckboxesAccess().getRule();
	}

	//ClickOnAllButtons:
	//	"clickOnAllButtons";
	public ClickOnAllButtonsElements getClickOnAllButtonsAccess() {
		return pClickOnAllButtons;
	}
	
	public ParserRule getClickOnAllButtonsRule() {
		return getClickOnAllButtonsAccess().getRule();
	}

	//FillAllTextFields:
	//	"fillAllTextFields" "with" (input=STRING | v=[Variable]);
	public FillAllTextFieldsElements getFillAllTextFieldsAccess() {
		return pFillAllTextFields;
	}
	
	public ParserRule getFillAllTextFieldsRule() {
		return getFillAllTextFieldsAccess().getRule();
	}

	//GoToAllLinks:
	//	"goToAllLinks";
	public GoToAllLinksElements getGoToAllLinksAccess() {
		return pGoToAllLinks;
	}
	
	public ParserRule getGoToAllLinksRule() {
		return getGoToAllLinksAccess().getRule();
	}

	//Variable:
	//	"var" o=WebPageObj name=ID;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//Memorise:
	//	"memorise" obj=WebPageObj "in" var=[Variable];
	public MemoriseElements getMemoriseAccess() {
		return pMemorise;
	}
	
	public ParserRule getMemoriseRule() {
		return getMemoriseAccess().getRule();
	}

	//Parameters:
	//	pars+=STRING*;
	public ParametersElements getParametersAccess() {
		return pParameters;
	}
	
	public ParserRule getParametersRule() {
		return getParametersAccess().getRule();
	}

	//Procedure:
	//	"procedure" name=ID "with" "Params" params=Parameters ins+=Instructions+ "endProcedure";
	public ProcedureElements getProcedureAccess() {
		return pProcedure;
	}
	
	public ParserRule getProcedureRule() {
		return getProcedureAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
